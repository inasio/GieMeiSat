import numpy as NY
import scipy.sparse as SS
import scipy.sparse.linalg as SL
import scipy.linalg as SLA
import matplotlib.pyplot as PP
import mpl_toolkits.mplot3d.axes3d as P3

def Jacobian_matrix(n):
  
  dxdy = 1./(n+1)**2
  ide = SS.eye(n,n)
  data = NY.ones((3,n))
  data[0,:] = -2.
  data[1,:] = 1.
  data[2,:] = 1.
  b = SS.spdiags(data,[0,-1,1],n,n)
  a = SS.kron(b,ide) + SS.kron(ide,b)
  a[0,0] = -2.; a[n-1,n-1] = -2.
  a[n*(n-1),n*(n-1)] = -2.; a[n**2-1,n**2-1] = -2.
  for i in NY.arange(n-2):
	a[i+1,i+1] = -3.
	a[n*(n-1)+1+i,n*(n-1)+1+i] = -3.
	a[n*(i+1),n*(i+1)] = -3.
	a[n*(i+2)-1,n*(i+2)-1] = -3.
  return a/dxdy
  
def plotty(xx,dx,n):
  
  z1 = xx.reshape(n,n)
  x = NY.arange(dx,1.-dx**2,dx)
  y = NY.arange(dx,1.-dx**2,dx)
  xc, yc = NY.meshgrid(x,y)
  fig = PP.figure()
  ax = P3.Axes3D(fig)
  ax.contourf3D(xc,yc,z1,60)
  ax.set_xlabel('X')
  ax.set_ylabel('Y')
  ax.set_zlabel('Z')
  PP.show()

def initial_condition(n,dx):
  b = NY.zeros([n,n])
  for i in NY.arange(n):
	for j in NY.arange(n):
	  b[i,j] = NY.cos(NY.pi*(i+1)/(n+1))*NY.cos(NY.pi*(j+1)/(n+1))
  return b.flatten()
  
if __name__ == "__main__":

  N = 14
  Lx = 1.; Ly = 1.
  Dx = Lx/(N+1); Dxdy = Dx**2; Dt = 1

  J = Jacobian_matrix(N)
  X = initial_condition(N,Dx)
  Grad = J*X/(2*NY.pi**2)
  #plotty(X,Dx,N)
  #plotty(Grad,Dx,N)
  #Err = SLA.norm(Grad + X)
  bla = Grad+X; print bla[0]
  #print Err; print Err/SLA.norm(X); print Grad+X
  